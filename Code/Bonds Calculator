{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Full Bonds Calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import fsolve\n",
    "import datetime\n",
    "import math as m\n",
    "from dateutil import relativedelta\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dates(start, end, frequency):\n",
    "    d1=datetime.datetime.strptime(start,\"%m/%d/%Y\")\n",
    "    d2=datetime.datetime.strptime(end,\"%m/%d/%Y\")\n",
    "    \n",
    "    years=int(relativedelta.relativedelta(d2,d1).years)\n",
    "    dates_list=[]\n",
    "    \n",
    "    for t in range(0,frequency*years):\n",
    "        x=d1 + relativedelta.relativedelta(months=(12/frequency)*t)\n",
    "        dates_list.append(x.strftime('%m/%d/%Y'))\n",
    "    \n",
    "    if end not in dates_list:\n",
    "        dates_list.append(end)\n",
    "    \n",
    "    return dates_list\n",
    "\n",
    "class Bond ():\n",
    "    def __init__(self, RV, dates,coupon,amort_pay, price, K):\n",
    "        self.coupon=coupon\n",
    "        self.dates=dates\n",
    "        self.dates.insert(0, (datetime.date.today()).strftime('%m/%d/%Y'))\n",
    "        self.RV=RV\n",
    "        self.price=price\n",
    "        self.amort_pay=amort_pay\n",
    "        self.K=K\n",
    "    \n",
    "    def interest_payments(self):\n",
    "        years_coupon=[]\n",
    "        for t in range(1,len(self.dates)):\n",
    "            d=self.dates[t]\n",
    "            h=self.dates[t-1]\n",
    "            years_coupon.append((datetime.datetime.strptime(d,\"%m/%d/%Y\")-\n",
    "                          datetime.datetime.strptime(h,\"%m/%d/%Y\")).days/365)\n",
    "        ilist=[]\n",
    "        for t in range(0,len(years_coupon)):\n",
    "            y=years_coupon[t]\n",
    "            if y>0:\n",
    "                ilist.append((self.coupon*years_coupon[t])*self.RV)\n",
    "            else:\n",
    "                ilist.append(0)\n",
    "        ilist.insert(0,0)\n",
    "        return ilist\n",
    "\n",
    "    def amort_payments(self):\n",
    "        amort_flow=[]\n",
    "        if self.amort_pay[0]==None:\n",
    "            for t in range(0,len(self.dates)):\n",
    "                x=self.dates[t]\n",
    "                if x==self.dates[-1]:\n",
    "                    amort_flow.append(self.RV)\n",
    "                else:\n",
    "                    amort_flow.append(0)\n",
    "            return amort_flow\n",
    "        elif self.amort_pay[0]!=None:\n",
    "            self.amort_pay.insert(0,0)\n",
    "            return self.amort_pay\n",
    "    \n",
    "    def cflows(self):\n",
    "        principal_cf=self.amort_payments()\n",
    "        interest_cf=self.interest_payments()\n",
    "        cash_flows=[]\n",
    "        for t in range(0,len(self.dates)):\n",
    "            cash_flows.append(principal_cf[t]+interest_cf[t])\n",
    "        cash_flows[0]=-self.price\n",
    "        return cash_flows\n",
    "    \n",
    "    def date_to_years(self):\n",
    "        dlist=[]\n",
    "        for t in range(0,len(self.dates)):\n",
    "            d=self.dates[t]\n",
    "            dlist.append(round((datetime.datetime.strptime(d,\"%m/%d/%Y\")-\n",
    "                          datetime.datetime.now()).days/365,4))\n",
    "        dlist[0]=0\n",
    "        return dlist\n",
    "    \n",
    "    def IRR(self):\n",
    "        CFS=self.cflows()\n",
    "        years=self.date_to_years()\n",
    "        x0=1\n",
    "        return np.asscalar(fsolve(NPV, x0=x0, args=(np.array(CFS),\n",
    "                                                        np.array(years))))\n",
    "    def PV(self):\n",
    "        CFS=self.cflows()\n",
    "        years=self.date_to_years()\n",
    "        IRR=self.K\n",
    "        return np.sum(np.array(CFS[1:])/(1+IRR)**np.array(years[1:]))\n",
    "\n",
    "def NPV(IRR,CFS,years):\n",
    "    return np.sum(np.array(CFS)/(1+IRR)**np.array(years))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>In years</th>\n",
       "      <th>Interest payments</th>\n",
       "      <th>Principal payments</th>\n",
       "      <th>Cash flow</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/08/2021</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-80.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2/4/2021</td>\n",
       "      <td>0.0712</td>\n",
       "      <td>0.739726</td>\n",
       "      <td>0</td>\n",
       "      <td>0.739726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5/4/2021</td>\n",
       "      <td>0.3151</td>\n",
       "      <td>2.438356</td>\n",
       "      <td>0</td>\n",
       "      <td>2.438356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8/4/2021</td>\n",
       "      <td>0.5671</td>\n",
       "      <td>2.520548</td>\n",
       "      <td>0</td>\n",
       "      <td>2.520548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11/4/2021</td>\n",
       "      <td>0.8192</td>\n",
       "      <td>2.520548</td>\n",
       "      <td>0</td>\n",
       "      <td>2.520548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2/4/2022</td>\n",
       "      <td>1.0712</td>\n",
       "      <td>2.520548</td>\n",
       "      <td>100</td>\n",
       "      <td>102.520548</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  In years  Interest payments  Principal payments   Cash flow\n",
       "0  01/08/2021    0.0000           0.000000                   0  -80.000000\n",
       "1    2/4/2021    0.0712           0.739726                   0    0.739726\n",
       "2    5/4/2021    0.3151           2.438356                   0    2.438356\n",
       "3    8/4/2021    0.5671           2.520548                   0    2.520548\n",
       "4   11/4/2021    0.8192           2.520548                   0    2.520548\n",
       "5    2/4/2022    1.0712           2.520548                 100  102.520548"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xbond=Bond(100, ['2/4/2021','5/4/2021','8/4/2021','11/4/2021','2/4/2022'],0.1,[None],80,0.3)\n",
    "pd.DataFrame({'Date':xbond.dates,'In years':xbond.date_to_years(),\n",
    "              'Interest payments':xbond.interest_payments(), \n",
    "              'Principal payments':xbond.amort_payments(), 'Cash flow':xbond.cflows()})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
